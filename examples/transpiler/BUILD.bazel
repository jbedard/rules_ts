# Note, Bazel 6 starlark has lambda so maybe we can stop using partial
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@aspect_rules_js//js:defs.bzl", "js_library")

load(":babel.bzl", "babel")

###
# See a more full-featured example showing swc and babel at
# https://github.com/aspect-build/bazel-examples/tree/main/ts_project_transpiler
###

# Our test fixture is a large enough file that the transpilation difference is measurable
write_file(
    name = "gen_ts",
    out = "big.ts",
    content = [
        "export const a{0}: number = {0}".format(x)
        for x in range(10000)
    ],
)
write_file(
    name = "gen_js",
    out = "data.js",
    content = ["{}"],
)
js_library(
    name = "data_js",
    srcs = ["data.js"],
)

# Runs babel to transpile ts -> js
# and tsc to type-check
ts_project(
    name = "babel",
    srcs = ["big.ts"],
    declaration = True,
    out_dir = "build-babel",
    source_map = True,
    deps = [
        ":data_js",
        "//examples:node_modules/@types/node",
        "//examples:node_modules/date-fns",
    ],
    transpiler = babel,
)

# exact same but not babel
ts_project(
    name = "tsc",
    srcs = ["big.ts"],
    declaration = True,
    out_dir = "build-tsc",
    source_map = True,
    deps = [
        ":data_js",
        "//examples:node_modules/@types/node",
        "//examples:node_modules/date-fns",
    ],
)

npm_package(
    name = "pkg-babel",
    srcs = [
        ":babel",
    ],
)
npm_package(
    name = "pkg-tsc",
    srcs = [
        ":tsc",
    ],
)

